<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lee.mapper.BlogMapperCustom">

    <resultMap id="BaseResultMap" type="com.lee.vo.BlogVo">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="comment_size" jdbcType="INTEGER" property="commentSize"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="mark_size" jdbcType="INTEGER" property="markSize"/>
        <result column="summary" jdbcType="VARCHAR" property="summary"/>
        <result column="tags" jdbcType="VARCHAR" property="tags"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="vote_size" jdbcType="INTEGER" property="voteSize"/>
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
        <result column="html_content" jdbcType="LONGVARCHAR" property="htmlContent"/>
        <result column="image_list" jdbcType="LONGVARCHAR" property="imageList"/>
        <!--关联查询的字段-->
        <result column="username" jdbcType="VARCHAR" property="userName"/>
        <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
        <result column="category" jdbcType="VARCHAR" property="category"/>
    </resultMap>

    <!--根据categoryId和userId查询分类名称和博主用户名-->
    <select id="getAllBlogVoList" resultMap="BaseResultMap">
        SELECT
            b.*,
            c.`name` AS category,
            u.username AS username,
            u.avatar AS avatar
        FROM
            blog b
            LEFT JOIN `user` u ON b.user_id = u.id
            LEFT JOIN category c ON b.category_id = c.id
        ORDER BY
	        create_time DESC
  </select>

    <select id="queryBlogByUsername" parameterType="String" resultMap="BaseResultMap">
        SELECT
            b.*,
            c.`name` AS category,
            u.username AS username,
            u.avatar AS avatar
        FROM
            blog b
            LEFT JOIN `user` u ON b.user_id = u.id
            LEFT JOIN category c ON b.category_id = c.id
        WHERE
            username = #{username}
        ORDER BY
            create_time DESC
    </select>


    <!-- 插入blog返回blogId -->
    <insert id="saveBlog" parameterType="com.lee.pojo.Blog" useGeneratedKeys="true"
            keyProperty="id">
        INSERT INTO blog
        <trim prefix="(" suffix=")" suffixOverrides=",">
            title,summary,content,tags,user_id,category_id,create_time,
            <if test="imageList != null">
                image_list,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            #{title},#{summary},#{content},#{tags},#{userId},#{categoryId},#{createTime},
            <if test="imageList != null">
                #{imageList},
            </if>
        </trim>
    </insert>

    <select id="queryMarkBlogByUserId" parameterType="Long" resultMap="BaseResultMap">
        SELECT
            blog.id AS id,
            blog.comment_size,
            blog.create_time,
            blog.mark_size,
            blog.summary,
            blog.tags,
            blog.title,
            blog.vote_size,
            blog.content,
            blog.html_content,
            blog.image_list,
            blog.category_id,
            blog.user_id AS ownner_id,
            ( SELECT username FROM `user` WHERE id = ownner_id ) AS username,
            ( SELECT avatar FROM `user` WHERE id = ownner_id ) AS avatar,
            ( SELECT NAME FROM category WHERE id = category_id ) AS category
        FROM
            blog_mark bm
            LEFT JOIN blog ON blog.id = blog_id
            LEFT JOIN category ON category.id = category_id
        WHERE
            bm.user_id = #{userId}
        ORDER BY bm.create_time DESC
    </select>

    <select id="queryBlogVoById" parameterType="Long" resultMap="BaseResultMap">
        SELECT
            blog.id,
            comment_size,
            create_time,
            mark_size,
            summary,
            tags,
            title,
            vote_size,
            content,
            html_content,
            image_list,
            u.username,
            u.avatar,
            c.NAME AS category
        FROM
            blog
            LEFT JOIN `user` u ON u.id = user_id
            LEFT JOIN category c ON c.id = category_id
        WHERE
            blog.id = #{blogId};
    </select>
    
</mapper>